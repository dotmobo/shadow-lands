/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react';
import { useAnimations, useGLTF } from '@react-three/drei';

export function Crypt({ position, color, rotation, ...props }: any) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/game/Crypt.glb');
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    actions.ArmatureAction.play();
  }, [group]);

  return (
    <group ref={group} {...props} dispose={null}>
      {color === undefined && (
        <spotLight
          position={[position[0] - 0.8, position[1] + 0.2, position[2] + 1]}
          color={'chartreuse'}
          intensity={Math.PI * 2}
        />
      )}
      <group
        name='Scene'
        position={position}
        scale={[0.3, 0.3, 0.3]}
        rotation={rotation}
      >
        <mesh
          name='Crypte'
          castShadow
          receiveShadow
          geometry={nodes.Crypte.geometry}
          material={materials.Etage}
        >
          {color !== undefined && (
            <meshStandardMaterial color={color} transparent opacity={0.2} />
          )}
        </mesh>
        <mesh
          name='Colonnes'
          castShadow
          receiveShadow
          geometry={nodes.Colonnes.geometry}
          material={materials.Colonnes}
          position={[1.555, 2.791, 1.147]}
          scale={0.804}
        >
          {color !== undefined && (
            <meshStandardMaterial color={color} transparent opacity={0.2} />
          )}
        </mesh>
        <mesh
          name='Crypte013'
          castShadow
          receiveShadow
          geometry={nodes.Crypte013.geometry}
          material={materials.Toit}
        >
          {color !== undefined && (
            <meshStandardMaterial color={color} transparent opacity={0.2} />
          )}
        </mesh>
        <mesh
          name='Crypte001'
          castShadow
          receiveShadow
          geometry={nodes.Crypte001.geometry}
          material={materials.Base}
        >
          {color !== undefined && (
            <meshStandardMaterial color={color} transparent opacity={0.2} />
          )}
        </mesh>
        <mesh
          name='Crypte002'
          castShadow
          receiveShadow
          geometry={nodes.Crypte002.geometry}
          material={materials.Vitraux}
        >
          {color !== undefined && (
            <meshStandardMaterial color={color} transparent opacity={0.2} />
          )}
        </mesh>
        <mesh
          name='Crypte003'
          castShadow
          receiveShadow
          geometry={nodes.Crypte003.geometry}
          material={materials.Vitres}
        >
          {color !== undefined && (
            <meshStandardMaterial color={color} transparent opacity={0.2} />
          )}
        </mesh>
        <mesh
          name='Crypte004'
          castShadow
          receiveShadow
          geometry={nodes.Crypte004.geometry}
          material={materials.Porte}
        >
          {color !== undefined && (
            <meshStandardMaterial color={color} transparent opacity={0.2} />
          )}
        </mesh>
        {color === undefined && (
          <group name='Armature' position={[-2.235, 9.392, 0.013]}>
            <skinnedMesh
              name='Cube'
              geometry={nodes.Cube.geometry}
              material={materials.Corbeau}
              skeleton={nodes.Cube.skeleton}
            />
            <primitive object={nodes.Bone} />
          </group>
        )}
      </group>
    </group>
  );
}

useGLTF.preload('/game/Crypt.glb');

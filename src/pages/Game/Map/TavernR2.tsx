/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';

export function TavernR2({ color, ...props }: any) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/game/Tavern+2.glb');
  const { actions } = useAnimations(animations, group);

  const position = [4.435, 1.067, 5.3641];
  const rotation = [0, -2.2521728667735, 0];

  useEffect(() => {
    actions['ArmatureAction.001'].play();
  }, [group]);

  return (
    <group ref={group} {...props} dispose={null}>
      {color === undefined && (
        <spotLight
          position={[position[0] + 0.3, position[1] + 0.2, position[2]]}
          color={'red'}
          intensity={Math.PI * 2}
        />
      )}
      <group name='Scene'>
        <group name='Tavern'>
          <mesh
            name='Cube001'
            castShadow
            receiveShadow
            geometry={nodes.Cube001.geometry}
            material={materials.Facade}
          >
            {color !== undefined && (
              <meshStandardMaterial color={color} transparent opacity={0.2} />
            )}
          </mesh>
          <mesh
            name='Cube001_1'
            castShadow
            receiveShadow
            geometry={nodes.Cube001_1.geometry}
            material={materials.Toit}
          >
            {color !== undefined && (
              <meshStandardMaterial color={color} transparent opacity={0.2} />
            )}
          </mesh>
          <mesh
            name='Cube001_2'
            castShadow
            receiveShadow
            geometry={nodes.Cube001_2.geometry}
            material={materials.Pierres}
          >
            {color !== undefined && (
              <meshStandardMaterial color={color} transparent opacity={0.2} />
            )}
          </mesh>
          <mesh
            name='Cube001_3'
            castShadow
            receiveShadow
            geometry={nodes.Cube001_3.geometry}
            material={materials.Porte}
          >
            {color !== undefined && (
              <meshStandardMaterial color={color} transparent opacity={0.2} />
            )}
          </mesh>
          <mesh
            name='Cube001_4'
            castShadow
            receiveShadow
            geometry={nodes.Cube001_4.geometry}
            material={materials.Lumiere}
          >
            {color !== undefined && (
              <meshStandardMaterial color={color} transparent opacity={0.2} />
            )}
          </mesh>
          <mesh
            name='Cube001_5'
            castShadow
            receiveShadow
            geometry={nodes.Cube001_5.geometry}
            material={materials.Cheminée}
          >
            {color !== undefined && (
              <meshStandardMaterial color={color} transparent opacity={0.2} />
            )}
          </mesh>
          <mesh
            name='Cube001_6'
            castShadow
            receiveShadow
            geometry={nodes.Cube001_6.geometry}
            material={materials.Poutres}
          >
            {color !== undefined && (
              <meshStandardMaterial color={color} transparent opacity={0.2} />
            )}
          </mesh>
          <mesh
            name='Cube001_7'
            castShadow
            receiveShadow
            geometry={nodes.Cube001_7.geometry}
            material={materials.Tonneau}
          >
            {color !== undefined && (
              <meshStandardMaterial color={color} transparent opacity={0.2} />
            )}
          </mesh>
        </group>
        <group
          name='Armature'
          position={[3.838, 1.035, 5.343]}
          rotation={[Math.PI, -0.875, Math.PI]}
          scale={0.4}
        >
          <skinnedMesh
            name='Crâne001'
            geometry={nodes.Crâne001.geometry}
            material={materials['Skeleton.001']}
            skeleton={nodes.Crâne001.skeleton}
          >
            {color !== undefined && (
              <meshStandardMaterial color={color} transparent opacity={0.2} />
            )}
          </skinnedMesh>
          <primitive object={nodes.mixamorigHips} />
          <primitive object={nodes.Ctrl_Master} />
          <primitive object={nodes.Ctrl_ArmPole_IK_Left} />
          <primitive object={nodes.Ctrl_Hand_IK_Left} />
          <primitive object={nodes.Ctrl_ArmPole_IK_Right} />
          <primitive object={nodes.Ctrl_Hand_IK_Right} />
          <primitive object={nodes.Ctrl_Foot_IK_Left} />
          <primitive object={nodes.Ctrl_LegPole_IK_Left} />
          <primitive object={nodes.Ctrl_Foot_IK_Right} />
          <primitive object={nodes.Ctrl_LegPole_IK_Right} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/game/Tavern+2.glb');

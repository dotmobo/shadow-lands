/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';

export function Tavern({ color, ...props }: any) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/game/Tavern.glb');
  const { actions } = useAnimations(animations, group);

  // const position = [4.435, 1.067, 5.3641];
  // const rotation = [0, -2.2521728667735, 0];

  const materiauxOnHover = (
    <meshStandardMaterial color={color} transparent opacity={0.2} />
  );

  return (
    <group {...props} dispose={null}>
      {color === undefined && (
        <>
          <pointLight
            position={[4.3041, 1.9694, 5.1689]}
            color={'yellow'}
            power={10}
          />

          <pointLight
            position={[5.5716, 1.9694, 5.4831]}
            color={'yellow'}
            power={10}
          />

          <pointLight
            position={[5.5124, 1.9694, 6.564]}
            color={'yellow'}
            power={10}
          />

          <pointLight
            position={[4.9129, 1.5467, 6.6745]}
            color={'yellow'}
            power={10}
          />

          <pointLight
            position={[4.1262, 1.5467, 6.072]}
            color={'yellow'}
            power={10}
          />

          <pointLight
            position={[4.9558, 1.8621, 5.7825]}
            power={10}
            color={'yellow'}
          />
        </>
      )}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube036.geometry}
        material={materials.Palette}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube036_1.geometry}
        material={materials.SkBase}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube036_2.geometry}
        material={materials.SkShadow}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube036_3.geometry}
        material={materials.SkTeeth}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube036_4.geometry}
        material={materials.LanterneVerreLumière}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube036_5.geometry}
        material={materials.Tabouret}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube036_6.geometry}
        material={materials['Planches.001']}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube036_7.geometry}
        material={materials.Portrait}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004.geometry}
        material={materials.MursTerre}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_1.geometry}
        material={materials['Planches.001']}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_2.geometry}
        material={materials.Vitraux}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_3.geometry}
        material={materials.VitresLumière}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_4.geometry}
        material={materials.Palette}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_5.geometry}
        material={materials.LanterneVerreLumière}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_6.geometry}
        material={materials['Cheminée.001']}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_7.geometry}
        material={materials.Porte_1}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_8.geometry}
        material={materials.Floor}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_9.geometry}
        material={materials.Poutre_Inst}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004_10.geometry}
        material={materials.Ardoises}
      >
        {color !== undefined && materiauxOnHover}
      </mesh>
    </group>
  );
}

useGLTF.preload('/game/Tavern.glb');
